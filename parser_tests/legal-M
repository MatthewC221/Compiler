// TESTING
//Have to make array have global-potential

//LAST TO DO
//calling functions is good
//last things to do, loop.



class Program {             //class set
    void main() {           //main program
    }
}

void special_func(int a, int b, int c) {

    int temp4[50];
    return;

}


int function1(int a) {           //function decl

    return 1;
}

int function2(int a) {       //function decl w/o param

    a = 5;
    return a;
}

int b;          //global var definition
b = 5;          //global var init.

int function3() {

    int temp;           //local var def.
    int temp1[15];
    temp = (function2(2) * (3 + 4)) + 4;
    
    return temp;
}

void function4() {

    int a[10];          //local array def.
    int c[10];
    a[3] = 5 * 2 * c[3];           //local array init.
    
    //b = a[3]; won't work  
    return;
}

//return integer, return identifier, return void, end function all seen

void function5() {

    int temp1[2];
   
    temp1[1] = 5 + function2(2) + function1(1) + 5 + 5;        //void func call
}

//onto void func call, func call w/arg, other func calls are tied in with var set, array ref set

void function6() {

    boolean abc, def, ghi;      //local multi-var init.
    
}

boolean abc, def, ghi;          //global multi-var init


//return function call/function call w/arg

int return_function(int temporary) {

    return function2(2);          //w/arg
}

int return_function1() {

    int a[5];
    int abd;
    int c;
    
    if (4 == 12) {         //typical conditional
        abd = 4;
    }
    
    if (1) {              //special conditional
    }

    
    return function3();           //no arg
}

int hello_test(int a) {

    return 1;
}

int return_test() {
    
    int tempo[2];
    tempo[1] = 5;
    if (hello_test(5) == tempo[1]) {      //functional in conditional
    }
    
    return 1;
}

//up to loops












